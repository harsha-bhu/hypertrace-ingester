service.name = span-normalizer
service.admin.port = 8099

main.class = org.hypertrace.core.spannormalizer.SpanNormalizer

span.type = jaeger
input.topic = "jaeger-spans"
output.topic = "raw-spans-from-jaeger-spans"
bypass.output.topic = "structured-traces-from-raw-spans"
raw.logs.output.topic = "raw-logs"

kafka.streams.config = {
  application.id = jaeger-spans-to-raw-spans-job
  metrics.recording.level = INFO
  num.stream.threads = 2
  producer.compression.type = gzip
  topology.optimization = all

  bootstrap.servers = "localhost:9092"
  auto.offset.reset = "latest"
  auto.commit.interval.ms = 5000
  schema.registry.url = "mock://localhost:8081"
  default.key.serde="org.hypertrace.core.kafkastreams.framework.serdes.AvroSerde"
  default.value.serde="org.hypertrace.core.kafkastreams.framework.serdes.AvroSerde"
}

processor {
  defaultTenantId = "__default"
}

processor {
  spanDropFilters = [
    [
      {
        "tagKey": "http.method",
        "operator": "EQ",
        "tagValue": "GET"
      },
      {
        "tagKey": "http.url",
        "operator": "CONTAINS",
        "tagValue": "health"
      }
    ],
    [
      {
        "tagKey": "grpc.url",
        "operator": "NEQ",
        "tagValue": "Sent.TestServiceGetEchos"
      }
    ]
  ]
}

spanRedaction {
  piiPciFields = [
    {
        name = "accountNo",
        regexString = "[0-9]{9,18}",
        keys = ["PayeeAccountNo", "payeeaccountno", "PayerAccountNo", "payee_account", "PayeeAccountNo", "accountNumber", "payer_ac_no", "payee_ac_no", "bank_account_number", "payer_account_number", "account_number", "razorpayx_account_number", "bank_acc_no", "PayerAccountNo", "contact"],
        type = "PII"
    },
    {
        name = "phoneNo",
        regexString = "^(?:(?:\\+|0{0,2})91(\\s*[\\-]\\s*)?|[0]?)?[789]\\d{9}$",
        keys = [],
        type = "PCI"
    },
    {
        name = "otp",
        regexString = "",
        keys = ["otp"],
        type = "PII"
    },
    {
        name = "http",
        regexString = "",
        keys = ["http.url", "http.method", "authorization"],
        type = "PCI"
    },
    {
      name = "http1",
      regexString = "",
      keys = [],
      type = "PII"
    },
    {
      name = "cardnum",
      regexString = "[0-9]{9,18}",
      keys = ["merchant_auto_debit_account_number", "cardnum", "masked_card_number", "card_number", "maskedAccountNumber", "number"],
      type = "PCI"
    },
    {
      name = "pan",
      regexString = "[A-Z a-z]{3}[ABCGHLJPTF abcghljptf]{1}[A-Z a-z]{1}[0-9]{4}[A-Z a-z]{1}",
      keys = [],
      type = "PII"
    },
    {
      name = "aadhar",
      regexString = "([2-9][0-9]{3}[0-9]{4}[0-9]{4})",
      keys = ["adhar_card_number", "aadhar_card_number", "aadhar_no", "aadhar_number", "pan_or_aadhar_no", "adhar_card_no", "aadhar_card_no", "adhar_number"],
      type = "PCI"
    },
    {
      name = "cvv",
      regexString = "([0-9]{3})",
      keys = ["cvv", "cavv"],
      type = "PCI"
    },
    {
      name = "vpa",
      regexString = "([0-9]{9,18}@[a-zA-Z]{3,})",
      keys = [],
      type = "PII"
    }
  ]
}

processor {
  bypass.key = "test.bypass"
  late.arrival.threshold.duration = "1d"

  # Configuration for dropping certain attributes that are captured by agent, but doesn't require in
  # the processing pipeline.
  #
  # allowed.attributes.prefixes : the list of prefixes that should match for which allowed keys
  # prefixed.matched.allowed.attributes : allowed keys from the subset of keys where prefix matched
  #
  # If either of config is empty allowed.attributes.prefixes or prefixed.matched.allowed.attributes,
  # it will not drop any attributes.
  # The above configuration doesn't impact if the key doesn't start with prefix.
  allowed.attributes.prefixes = ["http.request.header.x-", "http.response.header.x-"]
  prefixed.matched.allowed.attributes = ["http.request.header.x-allowed-1", "http.response.header.x-allowed-2"]
}

clients = {
  config.service.config = {
    host = localhost
    port = 50101
  }
}

span.rules.exclude {
  cache = {
    refreshAfterWriteDuration = 3m
    expireAfterWriteDuration = 5m
  }
}

rate.limit.config = []
